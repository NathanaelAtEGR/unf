#usda 1.0
(
    defaultPrim = "scene"
    subLayers = [
        @./sublayer.usda@,
        @./sublayer2.usda@
    ]
)

def Xform "scene" (
)
{

    def Xform "A" (

    )
    {
        string test = "test"

        def Xform "a" (

        )
        {
            string test = "test"
        }

        def Xform "b" (

        )
        {
            string btest = "btest"

            def Xform "bb" (

            )
            {
            string bbtest = "bbtest"
            }
        }
    }

    over "sublayer" (

    )
    {
        string test = "test"
    }

    def Xform "D" (
        prepend references = @./ref.usda@
    )
    {
        prepend rel test = [</scene/A>, </scene/sublayer2>]

        def Xform "r" (

        )
        {
             string test = "test"
        }

         def Xform "r2" (

        )
        {
            prepend rel test2 = </scene/D/a>
        }

        over "a" (
        )
        {
        prepend rel test = </scene/D/c>
        }
    }


    def Xform "test" (
        prepend references = @./ref.usda@
    )
    {
        prepend rel test = [</scene/A>, </scene>]
    }

    def Xform "testvariant1"()
    {
        def Xform "V" (
            variants = {
                string myVariant = "base"
            }
            prepend variantSets = "myVariant"
        )
        {
            def Xform "SphereGroup1"
            {
                def Sphere "sphere" {
                    float3[] extent = [(-2, -2, -2), (2, 2, 2)]
                    color3f[] primvars:displayColor
                    double radius = 2
                }

                def Xform "emptyPrim"{
                    
                }
            }

            variantSet "myVariant" = {
                    "base" (
                        prepend references = @./variant_base.usda@
                    )
                    {
                    }

                    "v" (
                        prepend references = @./variant_A.usda@
                    )
                    {
                    }
                }
        }
    }
    

}
